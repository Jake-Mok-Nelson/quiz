[
  {
    "quizzes": [
      {
        "title": "SemVer Basics",
        "imageURL": "https://quiz.jakenelson.cloud/semver.svg",
        "questions": [
          {
            "question": "What does 'Semver' stand for?",
            "options": [
              "Semantic Visualization",
              "Semantic Versioning",
              "Sequential Verification",
              "Sequential Versioning"
            ],
            "correctAnswer": 1,
            "explanation": "Semver stands for Semantic Versioning, a convention for versioning software to convey the type of changes introduced in a new release."
          },
          {
            "question": "Which of the following is the correct format for Semver?",
            "options": [
              "Major.Minor.Patch",
              "Patch.Minor.Major",
              "Minor.Major.Patch",
              "Major.Patch.Minor"
            ],
            "correctAnswer": 0,
            "explanation": "The correct format for Semver is Major.Minor.Patch, where Major, Minor, and Patch are non-negative integers representing different levels of changes in the software."
          },
          {
            "question": "In Semver, what does a change in the 'Major' version indicate?",
            "options": [
              "Backward-compatible bug fixes",
              "Backward-compatible new features",
              "Backward-incompatible changes",
              "Patch version reset"
            ],
            "correctAnswer": 2,
            "explanation": "A change in the Major version indicates backward-incompatible changes, which means that the new version might break existing functionality and require users to modify their code or configurations."
          },
          {
            "question": "In Semver, what does a change in the 'Minor' version indicate?",
            "options": [
              "Backward-compatible bug fixes",
              "Backward-compatible new features",
              "Backward-incompatible changes",
              "Patch version reset"
            ],
            "correctAnswer": 1,
            "explanation": "A change in the Minor version indicates the addition of backward-compatible new features. This means that the new version introduces new functionality but should not break existing code or configurations."
          },
          {
            "question": "In Semver, what does a change in the 'Patch' version indicate?",
            "options": [
              "Backward-compatible bug fixes",
              "Backward-compatible new features",
              "Backward-incompatible changes",
              "Minor version reset"
            ],
            "correctAnswer": 0,
            "explanation": "A change in the Patch version indicates backward-compatible bug fixes, meaning that the new version fixes issues or bugs without introducing new features or breaking existing code or configurations."
          }
        ]
      },
      {
        "title": "Git Merge Methods",
        "imageURL": "https://quiz.jakenelson.cloud/git-merge.svg",
        "questions": [
          {
            "question": "What is the primary purpose of the 'git merge' command?",
            "options": [
              "To create a new branch",
              "To commit changes to the repository",
              "To combine the changes from one branch into another",
              "To compare changes between branches"
            ],
            "correctAnswer": 2,
            "explanation": "The 'git merge' command is used to combine the changes from one branch into another, effectively integrating the work of multiple developers or branches."
          },
          {
            "question": "Which Git merge method creates a new merge commit in the target branch?",
            "options": [
              "Fast-forward",
              "Squash",
              "Rebase",
              "Merge commit"
            ],
            "correctAnswer": 3,
            "explanation": "The merge commit method creates a new merge commit in the target branch, preserving the commit history of both branches and clearly marking the point where they were merged."
          },
          {
            "question": "Which Git merge method moves the entire commit history of the source branch to the tip of the target branch?",
            "options": [
              "Fast-forward",
              "Squash",
              "Rebase",
              "Merge commit"
            ],
            "correctAnswer": 2,
            "explanation": "The rebase method moves the entire commit history of the source branch to the tip of the target branch, creating a linear commit history and avoiding the need for a merge commit."
          },
          {
            "question": "Which Git merge method combines the changes of the source branch into a single commit in the target branch?",
            "options": [
              "Fast-forward",
              "Squash",
              "Rebase",
              "Merge commit"
            ],
            "correctAnswer": 1,
            "explanation": "The squash method combines the changes of the source branch into a single commit in the target branch, creating a clean, linear commit history at the expense of detailed commit information from the source branch."
          },
          {
            "question": "Which Git merge method applies changes from the source branch directly to the target branch without creating a merge commit, if possible?",
            "options": [
              "Fast-forward",
              "Squash",
              "Rebase",
              "Merge commit"
            ],
            "correctAnswer": 0,
            "explanation": "The fast-forward method applies changes from the source branch directly to the target branch without creating a merge commit, if possible. This can only occur when the target branch has not diverged from the source branch, resulting in a linear commit history."
          }
        ]
      },
      {
        "title": "Docker Basics",
        "imageURL": "https://quiz.jakenelson.cloud/docker.svg",
        "questions": [
          {
            "question": "What is Docker?",
            "options": [
              "A cloud computing service",
              "An operating system",
              "A containerization platform",
              "A programming language"
            ],
            "correctAnswer": 2,
            "explanation": "Docker is a containerization platform that allows you to package your applications and their dependencies into containers, which can run consistently across different environments."
          },
          {
            "question": "Which command is used to create a new Docker container from an image?",
            "options": [
              "docker create",
              "docker build",
              "docker run",
              "docker pull"
            ],
            "correctAnswer": 2,
            "explanation": "The 'docker run' command is used to create a new Docker container from an image. It combines the 'docker create' and 'docker start' commands, creating and starting the container in a single command."
          },
          {
            "question": "What is a Dockerfile?",
            "options": [
              "A configuration file for Docker Compose",
              "A file containing Docker registry credentials",
              "A script containing instructions to build a Docker image",
              "A file that lists all running Docker containers"
            ],
            "correctAnswer": 2,
            "explanation": "A Dockerfile is a script containing instructions to build a Docker image. It specifies the base image, application code, dependencies, and configuration required to create a custom image for running a containerized application."
          },
          {
            "question": "What is the purpose of a Docker volume?",
            "options": [
              "To store environment variables",
              "To persist data across container restarts",
              "To define network settings",
              "To store Docker images"
            ],
            "correctAnswer": 1,
            "explanation": "Docker volumes are used to persist data across container restarts, allowing containers to maintain their state even when they are stopped and started again."
          },
          {
            "question": "Which command is used to list all running Docker containers?",
            "options": [
              "docker ps",
              "docker list",
              "docker containers",
              "docker ls"
            ],
            "correctAnswer": 0,
            "explanation": "The 'docker ps' command is used to list all running Docker containers. It shows container IDs, image names, command, creation time, status, and ports."
          },
          {
            "question": "How do you share data between two containers?",
            "options": [
              "By linking the containers",
              "Using Docker Compose",
              "Using Docker volumes",
              "Using environment variables"
            ],
            "correctAnswer": 2,
            "explanation": "Docker volumes can be used to share data between two containers. A volume can be created and mounted to both containers, allowing them to read and write data to the same location."
          },
          {
            "question": "What is the purpose of a Docker network?",
            "options": [
              "To store Docker images",
              "To connect containers to each other and the host",
              "To store container logs",
              "To manage container storage"
            ],
            "correctAnswer": 1,
            "explanation": "Docker networks are used to connect containers to each other and the host system. They provide a way for containers to communicate and can be configured to isolate containers or expose them to external networks."
          }
        ]
      },
      {
        "title": "Terraform Basics",
        "imageURL": "https://quiz.jakenelson.cloud/terraform.svg",
        "questions": [
          {
            "question": "What is Terraform?",
            "options": [
              "A programming language",
              "An infrastructure orchestration tool",
              "A containerization platform",
              "A version control system"
            ],
            "correctAnswer": 1,
            "explanation": "Terraform is an infrastructure orchestration tool that allows you to define and manage infrastructure as code. It supports multiple cloud providers and automates the provisioning and management of resources."
          },
          {
            "question": "What language is used to write Terraform configuration files?",
            "options": [
              "YAML",
              "JSON",
              "HCL (HashiCorp Configuration Language)",
              "Python"
            ],
            "correctAnswer": 2,
            "explanation": "Terraform configuration files are written in HCL (HashiCorp Configuration Language), a human-readable language designed by HashiCorp specifically for configuring infrastructure resources."
          },
          {
            "question": "What is a Terraform provider?",
            "options": [
              "A version control system for Terraform configurations",
              "A plugin that allows Terraform to manage resources for a specific platform",
              "A tool for validating Terraform configuration files",
              "A service that hosts Terraform configuration files"
            ],
            "correctAnswer": 1,
            "explanation": "A Terraform provider is a plugin that allows Terraform to manage resources for a specific platform, such as AWS, GCP, Azure, or Kubernetes. Providers are responsible for implementing the API interactions and exposing resources that can be managed by Terraform."
          },
          {
            "question": "Which command initializes the backend and installs the necessary provider plugins in Terraform?",
            "options": [
              "terraform init",
              "terraform apply",
              "terraform plan",
              "terraform validate"
            ],
            "correctAnswer": 0,
            "explanation": "The 'terraform init' command initializes the backend for storing your state and installs the necessary provider plugins. It should be run before any other Terraform commands, as it sets up the working directory for use with Terraform."
          }
        ]
      },
      {
        "title": "Kubernetes Basics",
        "imageURL": "https://quiz.jakenelson.cloud/kubernetes.svg",
        "questions": [
          {
            "question": "What is Kubernetes?",
            "options": [
              "A version control system",
              "A container orchestration platform",
              "An infrastructure provisioning tool",
              "A programming language"
            ],
            "correctAnswer": 1,
            "explanation": "Kubernetes is a container orchestration platform that automates the deployment, scaling, and management of containerized applications. It groups containers together into logical units for easy management and discoverability."
          },
          {
            "question": "What is a Kubernetes Pod?",
            "options": [
              "A group of containers that share the same network namespace and can communicate with each other",
              "A version control system for Kubernetes configurations",
              "A tool for validating Kubernetes configuration files",
              "A service that hosts Kubernetes configuration files"
            ],
            "correctAnswer": 0,
            "explanation": "A Kubernetes Pod is the smallest and simplest unit in the Kubernetes object model. It represents a single instance of a running process and consists of one or more containers that share the same network namespace, allowing them to communicate with each other."
          },
          {
            "question": "What is a Kubernetes Service?",
            "options": [
              "A group of Pods that work together",
              "An abstraction that defines a logical set of Pods and a policy to access them",
              "A tool for managing container images",
              "A package manager for Kubernetes resources"
            ],
            "correctAnswer": 1,
            "explanation": "A Kubernetes Service is an abstraction that defines a logical set of Pods and a policy to access them. Services provide a stable IP address and DNS name, allowing other resources in the cluster to discover and communicate with the Pods, even as they are created and destroyed."
          },
          {
            "question": "What is the purpose of a Kubernetes Deployment?",
            "options": [
              "To provide a stable IP address for Pods",
              "To manage the desired state of a replicated application",
              "To store configuration data for containers",
              "To schedule and run containers on nodes"
            ],
            "correctAnswer": 1,
            "explanation": "A Kubernetes Deployment is a higher-level abstraction that allows you to manage the desired state of a replicated application. It ensures that a specified number of replicas of a Pod are running at any given time, handling updates and rollbacks automatically."
          }
        ]
      },
      {
        "title": "Local Git Rebasing",
        "imageURL": "https://quiz.gitrebasing.cloud/git_rebase.svg",
        "questions": [
          {
            "question": "What is the primary purpose of 'git rebase'?",
            "options": [
              "To merge two branches",
              "To create a new branch",
              "To delete a branch",
              "To reapply a series of commits on a new base"
            ],
            "correctAnswer": 3,
            "explanation": "The primary purpose of 'git rebase' is to reapply a series of commits on a new base, which helps create a linear history and simplifies the commit graph."
          },
          {
            "question": "When performing a 'git rebase', which branch's commits get replayed?",
            "options": [
              "The current branch",
              "The base branch",
              "Both branches",
              "None of the branches"
            ],
            "correctAnswer": 0,
            "explanation": "When performing a 'git rebase', the commits from the current branch get replayed on top of the base branch."
          },
          {
            "question": "What is the main difference between 'git merge' and 'git rebase'?",
            "options": [
              "Merge creates a new commit, while rebase does not",
              "Rebase creates a new commit, while merge does not",
              "Merge only works with remote branches",
              "Rebase only works with local branches"
            ],
            "correctAnswer": 0,
            "explanation": "The main difference between 'git merge' and 'git rebase' is that 'git merge' creates a new commit representing the merge, while 'git rebase' replays the commits on a new base without creating a merge commit."
          },
          {
            "question": "What is the command to perform an interactive rebase starting from a specific commit?",
            "options": [
              "git rebase -i <commit-hash>",
              "git rebase --interactive <commit-hash>",
              "git interactive-rebase <commit-hash>",
              "git rebase <commit-hash> --interactive"
            ],
            "correctAnswer": 0,
            "explanation": "To perform an interactive rebase starting from a specific commit, use the command 'git rebase -i <commit-hash>'. This allows you to modify the commit history interactively."
          },
          {
            "question": "What should you do if a conflict occurs during a rebase?",
            "options": [
              "Resolve the conflict, stage the changes, and run 'git rebase --continue'",
              "Resolve the conflict, stage the changes, and run 'git rebase --abort'",
              "Resolve the conflict, stage the changes, and run 'git rebase --skip'",
              "Resolve the conflict, stage the changes, and run 'git merge --continue'"
            ],
            "correctAnswer": 0,
            "explanation": "If a conflict occurs during a rebase, you should resolve the conflict, stage the changes, and then run 'git rebase --continue' to proceed with the rebase process."
          }
        ]
      }
    ]
  }
]
